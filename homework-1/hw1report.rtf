{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 HW 1 Report\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1. Explain your choices of data structures for the open and closed lists of your Pathfinder's graph search:\
	The open list is a priority queue because I wanted to be able to have the nodes ordered. Additionally, a priority queue was best for the open list because the first object inserted into a queue is processed first. The closed list is a simple array that contains the nodes already visited because that is the only information we need from that list.\
\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 2. Create some large, uniform-cost mazes (i.e., with no mud tiles) and run both your Uninformed Breadth-first Tree Search algorithm from CW1 and your A* Graph Search from this assignment to find a solution. Add a counter to each Pathfinder that prints out how many nodes were generated during each of the BFS and A* runs and compare the outcomes. How effective was your heuristic at mitigating computational cost?\cb1 \uc0\u8232 	Based on the results of the counters, the heuristic was successful in mitigating computational cost. Being able to determine how much the estimated future cost from any given node proved to be beneficial when trying to determine the best path. Without the heuristic, there is no way to gage how much each move will \'93cost\'94.\cb3 \
}